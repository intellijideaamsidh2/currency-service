{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Currency Service","text":"<p>Two microservices:</p> <ul> <li>Currency Exchange Service: provides exchange rates (8181)</li> <li>Currency Conversion Service: converts amounts using exchange rates (8282)</li> </ul> <pre><code>graph TB\n  Client[Client] --&gt; Conversion[Currency Conversion\\n:8282]\n  Conversion --&gt;|Feign| Exchange[Currency Exchange\\n:8181]\n  Exchange --&gt; DB[(H2/MySQL)]</code></pre> <p>Open the Architecture section to explore more details.</p>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>Use the copy button at the top-right of each code block to copy commands quickly.</p>"},{"location":"deployment/#local","title":"Local","text":"<p>Exchange (run from repo root):</p> <pre><code>cd currency-exchange\nmvn spring-boot:run</code></pre> <p>Conversion (run from repo root):</p> <pre><code>cd currency-conversion\nmvn spring-boot:run</code></pre>"},{"location":"deployment/#docker","title":"Docker","text":"<p>Build images (Spring Boot buildpacks):</p> Windows (cmd) <pre><code>cd currency-exchange\nmvn clean spring-boot:build-image\ncd ..\\currency-conversion\nmvn clean spring-boot:build-image</code></pre> Linux/macOS <pre><code>cd currency-exchange\nmvn clean spring-boot:build-image\ncd ../currency-conversion\nmvn clean spring-boot:build-image</code></pre> <p>Create a Docker network:</p> <pre><code>docker network create mynet</code></pre> <p>Run Exchange service:</p> <pre><code>docker run --name currency-exchange --network mynet -d -p 8181:8181 amsidhmicroservice/currency-exchange:latest</code></pre> <p>Run Conversion service (pointing to Exchange):</p> Windows (cmd) <pre><code>docker run --name currency-conversion --network mynet -d -p 8282:8282 ^\n  -e CURRENCY_EXCHANGE_SERVICE_URL=http://currency-exchange:8181 ^\n  amsidhmicroservice/currency-conversion:latest</code></pre> Linux/macOS <pre><code>docker run --name currency-conversion --network mynet -d -p 8282:8282 \\\n  -e CURRENCY_EXCHANGE_SERVICE_URL=http://currency-exchange:8181 \\\n  amsidhmicroservice/currency-conversion:latest</code></pre>"},{"location":"deployment/#kubernetes","title":"Kubernetes","text":"<p>Apply the following manifests (namespace + deployments + services):</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata: { name: currency }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata: { name: currency-exchange, namespace: currency }\nspec:\n  replicas: 1\n  selector: { matchLabels: { app: currency-exchange } }\n  template:\n    metadata: { labels: { app: currency-exchange } }\n    spec:\n      containers:\n        - name: app\n          image: amsidhmicroservice/currency-exchange:latest\n          ports: [ { containerPort: 8181 } ]\n---\napiVersion: v1\nkind: Service\nmetadata: { name: currency-exchange, namespace: currency }\nspec:\n  selector: { app: currency-exchange }\n  ports: [ { port: 8181, targetPort: 8181 } ]\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata: { name: currency-conversion, namespace: currency }\nspec:\n  replicas: 1\n  selector: { matchLabels: { app: currency-conversion } }\n  template:\n    metadata: { labels: { app: currency-conversion } }\n    spec:\n      containers:\n        - name: app\n          image: amsidhmicroservice/currency-conversion:latest\n          env:\n            - name: CURRENCY_EXCHANGE_SERVICE_URL\n              value: http://currency-exchange.currency.svc.cluster.local:8181\n          ports: [ { containerPort: 8282 } ]\n---\napiVersion: v1\nkind: Service\nmetadata: { name: currency-conversion, namespace: currency }\nspec:\n  selector: { app: currency-conversion }\n  ports: [ { port: 8282, targetPort: 8282 } ]</code></pre>"},{"location":"development/","title":"Development","text":"<p>This page gathers practical details for developers: base URLs, local run hints, API endpoints, and a downloadable Postman collection.</p>"},{"location":"development/#base-urls","title":"Base URLs","text":"<ul> <li>Currency Exchange (local): http://localhost:8000</li> <li>Currency Conversion (local): http://localhost:8100</li> </ul>"},{"location":"development/#quick-run-docker","title":"Quick run (Docker)","text":"<ul> <li>Ensure both services are built and images are available.</li> <li>Run containers on a shared network (names match service discovery in examples):</li> </ul> <pre><code># Exchange\n# maps host port 8000 -&gt; container 8000\n# service name: currency-exchange\n\n# Conversion\n# maps host port 8100 -&gt; container 8100\n# service name: currency-conversion</code></pre>"},{"location":"development/#endpoints","title":"Endpoints","text":"<ul> <li>Exchange</li> <li>GET /currencyexchange/{from}/to/{to}/rate</li> <li>Conversion</li> <li>GET /currencyconversion/{from}/to/{to}/quantity/{qty}</li> </ul>"},{"location":"development/#postman-collection","title":"Postman collection","text":"<p>Download the collection and import into Postman: download postman collection</p> <p>Variables:</p> <ul> <li>base_exchange: http://localhost:8000</li> <li>base_conversion: http://localhost:8100</li> </ul>"},{"location":"api/conversion/","title":"Conversion API","text":""},{"location":"api/conversion/#convert","title":"Convert","text":"<pre><code>GET /currencyconversion/{from}/to/{to}/quantity/{qty}</code></pre> <p>Response</p> <pre><code>{\n  \"fromCurrency\":\"USD\",\n  \"toCurrency\":\"INR\",\n  \"quantity\":100,\n  \"rate\":83.50,\n  \"convertedAmount\":8350.00\n}</code></pre>"},{"location":"api/exchange/","title":"Exchange API","text":""},{"location":"api/exchange/#get-rate","title":"Get Rate","text":"<pre><code>GET /currencyexchange/{from}/to/{to}/rate</code></pre> <p>Response</p> <pre><code>{ \"fromCurrency\":\"USD\", \"toCurrency\":\"INR\", \"rate\": 83.50 }</code></pre>"},{"location":"architecture/class/","title":"Class Diagrams","text":""},{"location":"architecture/class/#exchange-service","title":"Exchange Service","text":"<pre><code>classDiagram\n  class ExchangeRateController\n  class ExchangeRateService\n  class ExchangeRateRepository\n  class ExchangeRate\n\n  ExchangeRateController --&gt; ExchangeRateService\n  ExchangeRateService --&gt; ExchangeRateRepository\n  ExchangeRateRepository --&gt; ExchangeRate</code></pre>"},{"location":"architecture/class/#conversion-service","title":"Conversion Service","text":"<pre><code>classDiagram\n  class CurrencyConversionController\n  class CurrencyConversionService\n  class CurrencyExchangeClient\n\n  CurrencyConversionController --&gt; CurrencyConversionService\n  CurrencyConversionService --&gt; CurrencyExchangeClient</code></pre>"},{"location":"architecture/hld/","title":"High Level Design (HLD)","text":""},{"location":"architecture/hld/#responsibility-split","title":"Responsibility Split","text":"<ul> <li>Currency Exchange Service: owns exchange-rate data, exposes rate lookup/management APIs, persists to H2/MySQL.</li> <li>Currency Conversion Service: orchestrates conversion, calls Exchange via OpenFeign, applies resilience policies.</li> </ul>"},{"location":"architecture/hld/#request-flow","title":"Request Flow","text":"<pre><code>flowchart TB\n  A[Client: Convert USD -&gt; INR] --&gt; B[Conversion Service]\n  B --&gt; C[Feign: GET /currencyexchange/USD/to/INR/rate]\n  C --&gt; D[Exchange Service]\n  D --&gt; E[(DB: H2/MySQL)]\n  E --&gt; D\n  D --&gt; C\n  C --&gt; B\n  B --&gt; F[Response: Converted Amount]</code></pre>"},{"location":"architecture/hld/#resilience","title":"Resilience","text":"<ul> <li>Retry (transient failures)</li> <li>Circuit Breaker (downstream protection)</li> <li>Bulkhead (isolation)</li> <li>Rate Limiter (back-pressure)</li> </ul>"},{"location":"architecture/hld/#observability","title":"Observability","text":"<ul> <li>Actuator health/metrics</li> <li>Micrometer \u2192 Prometheus</li> <li>Structured JSON logging</li> </ul>"},{"location":"architecture/hld/#deployment-targets","title":"Deployment Targets","text":"<ul> <li>Local JVM</li> <li>Docker images via Spring Boot Buildpacks</li> <li>Kubernetes (Deployments + Services)</li> </ul>"},{"location":"architecture/lld/","title":"Low Level Design (LLD)","text":""},{"location":"architecture/lld/#components-per-service","title":"Components per Service","text":"<ul> <li>Controller \u2192 handles HTTP endpoints</li> <li>Service \u2192 business logic</li> <li>Client (Feign) \u2192 inter-service calls</li> <li>Repository (Exchange svc) \u2192 persistence</li> <li>Entities/DTOs</li> </ul> <pre><code>classDiagram\n  class CurrencyExchangeController\n  class CurrencyExchangeService\n  class CurrencyExchangeRepository\n  class ExchangeRate {\n    +Long id\n    +String fromCurrency\n    +String toCurrency\n    +BigDecimal rate\n    +Instant lastUpdated\n  }\n\n  CurrencyExchangeController --&gt; CurrencyExchangeService\n  CurrencyExchangeService --&gt; CurrencyExchangeRepository\n  CurrencyExchangeRepository --&gt; ExchangeRate</code></pre>"},{"location":"architecture/lld/#configuration","title":"Configuration","text":"<ul> <li>OpenFeign clients with per-client configs</li> <li>Resilience4j policies (retry, circuitBreaker, bulkhead, rateLimiter)</li> <li>Actuator endpoints for health and metrics</li> </ul>"},{"location":"architecture/overview/","title":"System Architecture Overview","text":"<p>The Currency Service is built as two Spring Boot microservices that collaborate over HTTP:</p> <ul> <li>Currency Exchange Service (port 8181) manages exchange rates and persistence</li> <li>Currency Conversion Service (port 8282) calculates converted amounts using the exchange rates</li> </ul> <pre><code>graph TB\n  subgraph Client\n    UI[Client / API Consumer]\n  end\n  subgraph Services\n    CONV[Currency Conversion\\n:8282]\n    EXCH[Currency Exchange\\n:8181]\n  end\n  subgraph Data\n    H2[(H2 - Dev)]\n    MYSQL[(MySQL - Prod)]\n  end\n\n  UI --&gt; CONV\n  CONV --&gt;|Feign| EXCH\n  EXCH --&gt; H2\n  EXCH --&gt; MYSQL</code></pre> <p>Key qualities: scalability (horizontal), resilience (Retry, CircuitBreaker), observability (Actuator, Micrometer), and portability (Docker/Kubernetes).</p>"},{"location":"architecture/sequence/","title":"Sequence Diagrams","text":""},{"location":"architecture/sequence/#conversion-flow","title":"Conversion Flow","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant Conv as Conversion\n  participant Ex as Exchange\n  participant DB as Database\n\n  Client-&gt;&gt;Conv: GET /currencyconversion/USD/to/INR/quantity/100\n  Conv-&gt;&gt;Ex: GET /currencyexchange/USD/to/INR/rate\n  Ex-&gt;&gt;DB: SELECT rate\n  DB--&gt;&gt;Ex: rate = 83.50\n  Ex--&gt;&gt;Conv: 83.50\n  Conv-&gt;&gt;Conv: 100 * 83.50 = 8350\n  Conv--&gt;&gt;Client: 8350</code></pre>"},{"location":"architecture/sequence/#exchange-rate-update","title":"Exchange Rate Update","text":"<pre><code>sequenceDiagram\n  participant Admin\n  participant Ex as Exchange\n  participant DB as Database\n\n  Admin-&gt;&gt;Ex: POST /currencyexchange {pair, rate}\n  Ex-&gt;&gt;DB: UPSERT pair,rate\n  DB--&gt;&gt;Ex: OK\n  Ex--&gt;&gt;Admin: 200 OK</code></pre>"},{"location":"database/design/","title":"Database Design","text":"<p>Single table for exchange rates owned by the Exchange service.</p>"},{"location":"database/design/#table-exchange_rate","title":"Table: <code>exchange_rate</code>","text":"<ul> <li><code>id</code> BIGINT PK (auto)</li> <li><code>from_currency</code> VARCHAR(10) NOT NULL</li> <li><code>to_currency</code> VARCHAR(10) NOT NULL</li> <li><code>rate</code> DECIMAL(19,6) NOT NULL</li> <li><code>last_updated</code> TIMESTAMP DEFAULT CURRENT_TIMESTAMP</li> <li>Unique constraint on (<code>from_currency</code>, <code>to_currency</code>)</li> </ul> <p>Indexes:</p> <ul> <li>Unique index on currency pair</li> </ul> <p>Notes:</p> <ul> <li>H2 for development and tests</li> <li>MySQL/InnoDB for production</li> </ul>"},{"location":"database/h2/","title":"H2 Database Scripts (DDL + DML)","text":"<pre><code>DROP TABLE IF EXISTS exchange_rate;\n\nCREATE TABLE exchange_rate (\n  id IDENTITY PRIMARY KEY,\n  from_currency VARCHAR(10) NOT NULL,\n  to_currency VARCHAR(10) NOT NULL,\n  rate DECIMAL(19,6) NOT NULL,\n  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  CONSTRAINT uq_pair UNIQUE (from_currency, to_currency)\n);\n\nINSERT INTO exchange_rate (from_currency, to_currency, rate) VALUES\n  ('USD','INR',83.50),\n  ('EUR','INR',89.75),\n  ('USD','EUR',0.93);</code></pre>"},{"location":"database/mysql/","title":"MySQL Database Scripts (DDL + DML)","text":"<pre><code>DROP TABLE IF EXISTS exchange_rate;\n\nCREATE TABLE exchange_rate (\n  id BIGINT NOT NULL AUTO_INCREMENT,\n  from_currency VARCHAR(10) NOT NULL,\n  to_currency VARCHAR(10) NOT NULL,\n  rate DECIMAL(19,6) NOT NULL,\n  last_updated TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (id),\n  UNIQUE KEY uq_pair (from_currency, to_currency)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nINSERT INTO exchange_rate (from_currency, to_currency, rate) VALUES\n  ('USD','INR',83.50),\n  ('EUR','INR',89.75),\n  ('USD','EUR',0.93);</code></pre>"},{"location":"services/conversion/","title":"Currency Conversion Service","text":"<ul> <li>Port: 8282</li> <li>Responsibility: Convert amounts using exchange rates from Exchange service</li> <li>Integration: OpenFeign client to call Exchange</li> </ul>"},{"location":"services/conversion/#configuration","title":"Configuration","text":"<ul> <li>Env var: <code>CURRENCY_EXCHANGE_SERVICE_URL</code> (e.g., <code>http://currency-exchange:8181</code> in Docker network)</li> <li>Feign client name: <code>currency-exchange</code></li> </ul>"},{"location":"services/conversion/#endpoint","title":"Endpoint","text":"<ul> <li>GET <code>/currencyconversion/{from}/to/{to}/quantity/{qty}</code></li> </ul> <p>Response:</p> <pre><code>{\n  \"fromCurrency\":\"USD\",\n  \"toCurrency\":\"INR\",\n  \"quantity\":100,\n  \"rate\":83.50,\n  \"convertedAmount\":8350.00\n}</code></pre>"},{"location":"services/conversion/#run-with-docker-with-network","title":"Run with Docker (with network)","text":"<pre><code>docker network create mynet\n\ndocker run --name currency-exchange --network mynet -d -p 8181:8181 amsidhmicroservice/currency-exchange:latest\n\ndocker run --name currency-conversion --network mynet -d -p 8282:8282 ^\n  -e CURRENCY_EXCHANGE_SERVICE_URL=http://currency-exchange:8181 ^\n  amsidhmicroservice/currency-conversion:latest</code></pre>"},{"location":"services/conversion/#kubernetes-snippet","title":"Kubernetes (snippet)","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata: { name: currency-conversion }\nspec:\n  replicas: 1\n  selector: { matchLabels: { app: currency-conversion } }\n  template:\n    metadata: { labels: { app: currency-conversion } }\n    spec:\n      containers:\n        - name: app\n          image: amsidhmicroservice/currency-conversion:latest\n          env:\n            - name: CURRENCY_EXCHANGE_SERVICE_URL\n              value: http://currency-exchange:8181\n          ports: [ { containerPort: 8282 } ]\n---\napiVersion: v1\nkind: Service\nmetadata: { name: currency-conversion }\nspec:\n  selector: { app: currency-conversion }\n  ports: [ { port: 8282, targetPort: 8282 } ]</code></pre>"},{"location":"services/exchange/","title":"Currency Exchange Service","text":"<ul> <li>Port: 8181</li> <li>Responsibility: Manage and serve currency exchange rates</li> <li>Persistence: H2 (dev) / MySQL (prod)</li> </ul>"},{"location":"services/exchange/#endpoints","title":"Endpoints","text":"<ul> <li>GET <code>/currencyexchange/{from}/to/{to}/rate</code></li> <li>POST <code>/currencyexchange</code> (create/update)</li> <li>GET <code>/actuator/health</code></li> </ul>"},{"location":"services/exchange/#example","title":"Example","text":"<p>Request:</p> <pre><code>GET /currencyexchange/USD/to/INR/rate</code></pre> <p>Response:</p> <pre><code>{ \"fromCurrency\":\"USD\", \"toCurrency\":\"INR\", \"rate\":83.50 }</code></pre>"},{"location":"services/exchange/#run-with-docker","title":"Run with Docker","text":"<pre><code>docker run --name currency-exchange -d -p 8181:8181 amsidhmicroservice/currency-exchange:latest</code></pre>"},{"location":"services/exchange/#kubernetes-snippet","title":"Kubernetes (snippet)","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata: { name: currency-exchange }\nspec:\n  replicas: 1\n  selector: { matchLabels: { app: currency-exchange } }\n  template:\n    metadata: { labels: { app: currency-exchange } }\n    spec:\n      containers:\n        - name: app\n          image: amsidhmicroservice/currency-exchange:latest\n          ports: [ { containerPort: 8181 } ]\n---\napiVersion: v1\nkind: Service\nmetadata: { name: currency-exchange }\nspec:\n  selector: { app: currency-exchange }\n  ports: [ { port: 8181, targetPort: 8181 } ]</code></pre>"}]}